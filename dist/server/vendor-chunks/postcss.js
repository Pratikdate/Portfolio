"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/postcss";
exports.ids = ["vendor-chunks/postcss"];
exports.modules = {

/***/ "(ssr)/./node_modules/postcss/lib/css-syntax-error.js":
/*!******************************************************!*\
  !*** ./node_modules/postcss/lib/css-syntax-error.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet pico = __webpack_require__(/*! picocolors */ \"(ssr)/./node_modules/picocolors/picocolors.js\");\nlet terminalHighlight = __webpack_require__(/*! ./terminal-highlight */ \"(ssr)/./node_modules/postcss/lib/terminal-highlight.js\");\nclass CssSyntaxError extends Error {\n    constructor(message, line, column, source, file, plugin){\n        super(message);\n        this.name = \"CssSyntaxError\";\n        this.reason = message;\n        if (file) {\n            this.file = file;\n        }\n        if (source) {\n            this.source = source;\n        }\n        if (plugin) {\n            this.plugin = plugin;\n        }\n        if (typeof line !== \"undefined\" && typeof column !== \"undefined\") {\n            if (typeof line === \"number\") {\n                this.line = line;\n                this.column = column;\n            } else {\n                this.line = line.line;\n                this.column = line.column;\n                this.endLine = column.line;\n                this.endColumn = column.column;\n            }\n        }\n        this.setMessage();\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, CssSyntaxError);\n        }\n    }\n    setMessage() {\n        this.message = this.plugin ? this.plugin + \": \" : \"\";\n        this.message += this.file ? this.file : \"<css input>\";\n        if (typeof this.line !== \"undefined\") {\n            this.message += \":\" + this.line + \":\" + this.column;\n        }\n        this.message += \": \" + this.reason;\n    }\n    showSourceCode(color) {\n        if (!this.source) return \"\";\n        let css = this.source;\n        if (color == null) color = pico.isColorSupported;\n        if (terminalHighlight) {\n            if (color) css = terminalHighlight(css);\n        }\n        let lines = css.split(/\\r?\\n/);\n        let start = Math.max(this.line - 3, 0);\n        let end = Math.min(this.line + 2, lines.length);\n        let maxWidth = String(end).length;\n        let mark, aside;\n        if (color) {\n            let { bold, gray, red } = pico.createColors(true);\n            mark = (text)=>bold(red(text));\n            aside = (text)=>gray(text);\n        } else {\n            mark = aside = (str)=>str;\n        }\n        return lines.slice(start, end).map((line, index)=>{\n            let number = start + 1 + index;\n            let gutter = \" \" + (\" \" + number).slice(-maxWidth) + \" | \";\n            if (number === this.line) {\n                let spacing = aside(gutter.replace(/\\d/g, \" \")) + line.slice(0, this.column - 1).replace(/[^\\t]/g, \" \");\n                return mark(\">\") + aside(gutter) + line + \"\\n \" + spacing + mark(\"^\");\n            }\n            return \" \" + aside(gutter) + line;\n        }).join(\"\\n\");\n    }\n    toString() {\n        let code = this.showSourceCode();\n        if (code) {\n            code = \"\\n\\n\" + code + \"\\n\";\n        }\n        return this.name + \": \" + this.message + code;\n    }\n}\nmodule.exports = CssSyntaxError;\nCssSyntaxError.default = CssSyntaxError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvY3NzLXN5bnRheC1lcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBRW5CLElBQUlDLG9CQUFvQkQsbUJBQU9BLENBQUM7QUFFaEMsTUFBTUUsdUJBQXVCQztJQUMzQkMsWUFBWUMsT0FBTyxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sQ0FBRTtRQUN2RCxLQUFLLENBQUNMO1FBQ04sSUFBSSxDQUFDTSxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNDLE1BQU0sR0FBR1A7UUFFZCxJQUFJSSxNQUFNO1lBQ1IsSUFBSSxDQUFDQSxJQUFJLEdBQUdBO1FBQ2Q7UUFDQSxJQUFJRCxRQUFRO1lBQ1YsSUFBSSxDQUFDQSxNQUFNLEdBQUdBO1FBQ2hCO1FBQ0EsSUFBSUUsUUFBUTtZQUNWLElBQUksQ0FBQ0EsTUFBTSxHQUFHQTtRQUNoQjtRQUNBLElBQUksT0FBT0osU0FBUyxlQUFlLE9BQU9DLFdBQVcsYUFBYTtZQUNoRSxJQUFJLE9BQU9ELFNBQVMsVUFBVTtnQkFDNUIsSUFBSSxDQUFDQSxJQUFJLEdBQUdBO2dCQUNaLElBQUksQ0FBQ0MsTUFBTSxHQUFHQTtZQUNoQixPQUFPO2dCQUNMLElBQUksQ0FBQ0QsSUFBSSxHQUFHQSxLQUFLQSxJQUFJO2dCQUNyQixJQUFJLENBQUNDLE1BQU0sR0FBR0QsS0FBS0MsTUFBTTtnQkFDekIsSUFBSSxDQUFDTSxPQUFPLEdBQUdOLE9BQU9ELElBQUk7Z0JBQzFCLElBQUksQ0FBQ1EsU0FBUyxHQUFHUCxPQUFPQSxNQUFNO1lBQ2hDO1FBQ0Y7UUFFQSxJQUFJLENBQUNRLFVBQVU7UUFFZixJQUFJWixNQUFNYSxpQkFBaUIsRUFBRTtZQUMzQmIsTUFBTWEsaUJBQWlCLENBQUMsSUFBSSxFQUFFZDtRQUNoQztJQUNGO0lBRUFhLGFBQWE7UUFDWCxJQUFJLENBQUNWLE9BQU8sR0FBRyxJQUFJLENBQUNLLE1BQU0sR0FBRyxJQUFJLENBQUNBLE1BQU0sR0FBRyxPQUFPO1FBQ2xELElBQUksQ0FBQ0wsT0FBTyxJQUFJLElBQUksQ0FBQ0ksSUFBSSxHQUFHLElBQUksQ0FBQ0EsSUFBSSxHQUFHO1FBQ3hDLElBQUksT0FBTyxJQUFJLENBQUNILElBQUksS0FBSyxhQUFhO1lBQ3BDLElBQUksQ0FBQ0QsT0FBTyxJQUFJLE1BQU0sSUFBSSxDQUFDQyxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUNDLE1BQU07UUFDckQ7UUFDQSxJQUFJLENBQUNGLE9BQU8sSUFBSSxPQUFPLElBQUksQ0FBQ08sTUFBTTtJQUNwQztJQUVBSyxlQUFlQyxLQUFLLEVBQUU7UUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQ1YsTUFBTSxFQUFFLE9BQU87UUFFekIsSUFBSVcsTUFBTSxJQUFJLENBQUNYLE1BQU07UUFDckIsSUFBSVUsU0FBUyxNQUFNQSxRQUFRbkIsS0FBS3FCLGdCQUFnQjtRQUNoRCxJQUFJbkIsbUJBQW1CO1lBQ3JCLElBQUlpQixPQUFPQyxNQUFNbEIsa0JBQWtCa0I7UUFDckM7UUFFQSxJQUFJRSxRQUFRRixJQUFJRyxLQUFLLENBQUM7UUFDdEIsSUFBSUMsUUFBUUMsS0FBS0MsR0FBRyxDQUFDLElBQUksQ0FBQ25CLElBQUksR0FBRyxHQUFHO1FBQ3BDLElBQUlvQixNQUFNRixLQUFLRyxHQUFHLENBQUMsSUFBSSxDQUFDckIsSUFBSSxHQUFHLEdBQUdlLE1BQU1PLE1BQU07UUFFOUMsSUFBSUMsV0FBV0MsT0FBT0osS0FBS0UsTUFBTTtRQUVqQyxJQUFJRyxNQUFNQztRQUNWLElBQUlkLE9BQU87WUFDVCxJQUFJLEVBQUVlLElBQUksRUFBRUMsSUFBSSxFQUFFQyxHQUFHLEVBQUUsR0FBR3BDLEtBQUtxQyxZQUFZLENBQUM7WUFDNUNMLE9BQU9NLENBQUFBLE9BQVFKLEtBQUtFLElBQUlFO1lBQ3hCTCxRQUFRSyxDQUFBQSxPQUFRSCxLQUFLRztRQUN2QixPQUFPO1lBQ0xOLE9BQU9DLFFBQVFNLENBQUFBLE1BQU9BO1FBQ3hCO1FBRUEsT0FBT2pCLE1BQ0prQixLQUFLLENBQUNoQixPQUFPRyxLQUNiYyxHQUFHLENBQUMsQ0FBQ2xDLE1BQU1tQztZQUNWLElBQUlDLFNBQVNuQixRQUFRLElBQUlrQjtZQUN6QixJQUFJRSxTQUFTLE1BQU0sQ0FBQyxNQUFNRCxNQUFLLEVBQUdILEtBQUssQ0FBQyxDQUFDVixZQUFZO1lBQ3JELElBQUlhLFdBQVcsSUFBSSxDQUFDcEMsSUFBSSxFQUFFO2dCQUN4QixJQUFJc0MsVUFDRlosTUFBTVcsT0FBT0UsT0FBTyxDQUFDLE9BQU8sUUFDNUJ2QyxLQUFLaUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDaEMsTUFBTSxHQUFHLEdBQUdzQyxPQUFPLENBQUMsVUFBVTtnQkFDbkQsT0FBT2QsS0FBSyxPQUFPQyxNQUFNVyxVQUFVckMsT0FBTyxRQUFRc0MsVUFBVWIsS0FBSztZQUNuRTtZQUNBLE9BQU8sTUFBTUMsTUFBTVcsVUFBVXJDO1FBQy9CLEdBQ0N3QyxJQUFJLENBQUM7SUFDVjtJQUVBQyxXQUFXO1FBQ1QsSUFBSUMsT0FBTyxJQUFJLENBQUMvQixjQUFjO1FBQzlCLElBQUkrQixNQUFNO1lBQ1JBLE9BQU8sU0FBU0EsT0FBTztRQUN6QjtRQUNBLE9BQU8sSUFBSSxDQUFDckMsSUFBSSxHQUFHLE9BQU8sSUFBSSxDQUFDTixPQUFPLEdBQUcyQztJQUMzQztBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBR2hEO0FBQ2pCQSxlQUFlaUQsT0FBTyxHQUFHakQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL2Nzcy1zeW50YXgtZXJyb3IuanM/MTE3NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IHBpY28gPSByZXF1aXJlKCdwaWNvY29sb3JzJylcblxubGV0IHRlcm1pbmFsSGlnaGxpZ2h0ID0gcmVxdWlyZSgnLi90ZXJtaW5hbC1oaWdobGlnaHQnKVxuXG5jbGFzcyBDc3NTeW50YXhFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgbGluZSwgY29sdW1uLCBzb3VyY2UsIGZpbGUsIHBsdWdpbikge1xuICAgIHN1cGVyKG1lc3NhZ2UpXG4gICAgdGhpcy5uYW1lID0gJ0Nzc1N5bnRheEVycm9yJ1xuICAgIHRoaXMucmVhc29uID0gbWVzc2FnZVxuXG4gICAgaWYgKGZpbGUpIHtcbiAgICAgIHRoaXMuZmlsZSA9IGZpbGVcbiAgICB9XG4gICAgaWYgKHNvdXJjZSkge1xuICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2VcbiAgICB9XG4gICAgaWYgKHBsdWdpbikge1xuICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW5cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBsaW5lICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29sdW1uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHR5cGVvZiBsaW5lID09PSAnbnVtYmVyJykge1xuICAgICAgICB0aGlzLmxpbmUgPSBsaW5lXG4gICAgICAgIHRoaXMuY29sdW1uID0gY29sdW1uXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxpbmUgPSBsaW5lLmxpbmVcbiAgICAgICAgdGhpcy5jb2x1bW4gPSBsaW5lLmNvbHVtblxuICAgICAgICB0aGlzLmVuZExpbmUgPSBjb2x1bW4ubGluZVxuICAgICAgICB0aGlzLmVuZENvbHVtbiA9IGNvbHVtbi5jb2x1bW5cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNldE1lc3NhZ2UoKVxuXG4gICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBDc3NTeW50YXhFcnJvcilcbiAgICB9XG4gIH1cblxuICBzZXRNZXNzYWdlKCkge1xuICAgIHRoaXMubWVzc2FnZSA9IHRoaXMucGx1Z2luID8gdGhpcy5wbHVnaW4gKyAnOiAnIDogJydcbiAgICB0aGlzLm1lc3NhZ2UgKz0gdGhpcy5maWxlID8gdGhpcy5maWxlIDogJzxjc3MgaW5wdXQ+J1xuICAgIGlmICh0eXBlb2YgdGhpcy5saW5lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5tZXNzYWdlICs9ICc6JyArIHRoaXMubGluZSArICc6JyArIHRoaXMuY29sdW1uXG4gICAgfVxuICAgIHRoaXMubWVzc2FnZSArPSAnOiAnICsgdGhpcy5yZWFzb25cbiAgfVxuXG4gIHNob3dTb3VyY2VDb2RlKGNvbG9yKSB7XG4gICAgaWYgKCF0aGlzLnNvdXJjZSkgcmV0dXJuICcnXG5cbiAgICBsZXQgY3NzID0gdGhpcy5zb3VyY2VcbiAgICBpZiAoY29sb3IgPT0gbnVsbCkgY29sb3IgPSBwaWNvLmlzQ29sb3JTdXBwb3J0ZWRcbiAgICBpZiAodGVybWluYWxIaWdobGlnaHQpIHtcbiAgICAgIGlmIChjb2xvcikgY3NzID0gdGVybWluYWxIaWdobGlnaHQoY3NzKVxuICAgIH1cblxuICAgIGxldCBsaW5lcyA9IGNzcy5zcGxpdCgvXFxyP1xcbi8pXG4gICAgbGV0IHN0YXJ0ID0gTWF0aC5tYXgodGhpcy5saW5lIC0gMywgMClcbiAgICBsZXQgZW5kID0gTWF0aC5taW4odGhpcy5saW5lICsgMiwgbGluZXMubGVuZ3RoKVxuXG4gICAgbGV0IG1heFdpZHRoID0gU3RyaW5nKGVuZCkubGVuZ3RoXG5cbiAgICBsZXQgbWFyaywgYXNpZGVcbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIGxldCB7IGJvbGQsIGdyYXksIHJlZCB9ID0gcGljby5jcmVhdGVDb2xvcnModHJ1ZSlcbiAgICAgIG1hcmsgPSB0ZXh0ID0+IGJvbGQocmVkKHRleHQpKVxuICAgICAgYXNpZGUgPSB0ZXh0ID0+IGdyYXkodGV4dClcbiAgICB9IGVsc2Uge1xuICAgICAgbWFyayA9IGFzaWRlID0gc3RyID0+IHN0clxuICAgIH1cblxuICAgIHJldHVybiBsaW5lc1xuICAgICAgLnNsaWNlKHN0YXJ0LCBlbmQpXG4gICAgICAubWFwKChsaW5lLCBpbmRleCkgPT4ge1xuICAgICAgICBsZXQgbnVtYmVyID0gc3RhcnQgKyAxICsgaW5kZXhcbiAgICAgICAgbGV0IGd1dHRlciA9ICcgJyArICgnICcgKyBudW1iZXIpLnNsaWNlKC1tYXhXaWR0aCkgKyAnIHwgJ1xuICAgICAgICBpZiAobnVtYmVyID09PSB0aGlzLmxpbmUpIHtcbiAgICAgICAgICBsZXQgc3BhY2luZyA9XG4gICAgICAgICAgICBhc2lkZShndXR0ZXIucmVwbGFjZSgvXFxkL2csICcgJykpICtcbiAgICAgICAgICAgIGxpbmUuc2xpY2UoMCwgdGhpcy5jb2x1bW4gLSAxKS5yZXBsYWNlKC9bXlxcdF0vZywgJyAnKVxuICAgICAgICAgIHJldHVybiBtYXJrKCc+JykgKyBhc2lkZShndXR0ZXIpICsgbGluZSArICdcXG4gJyArIHNwYWNpbmcgKyBtYXJrKCdeJylcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyAnICsgYXNpZGUoZ3V0dGVyKSArIGxpbmVcbiAgICAgIH0pXG4gICAgICAuam9pbignXFxuJylcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCBjb2RlID0gdGhpcy5zaG93U291cmNlQ29kZSgpXG4gICAgaWYgKGNvZGUpIHtcbiAgICAgIGNvZGUgPSAnXFxuXFxuJyArIGNvZGUgKyAnXFxuJ1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5uYW1lICsgJzogJyArIHRoaXMubWVzc2FnZSArIGNvZGVcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENzc1N5bnRheEVycm9yXG5Dc3NTeW50YXhFcnJvci5kZWZhdWx0ID0gQ3NzU3ludGF4RXJyb3JcbiJdLCJuYW1lcyI6WyJwaWNvIiwicmVxdWlyZSIsInRlcm1pbmFsSGlnaGxpZ2h0IiwiQ3NzU3ludGF4RXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsImxpbmUiLCJjb2x1bW4iLCJzb3VyY2UiLCJmaWxlIiwicGx1Z2luIiwibmFtZSIsInJlYXNvbiIsImVuZExpbmUiLCJlbmRDb2x1bW4iLCJzZXRNZXNzYWdlIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJzaG93U291cmNlQ29kZSIsImNvbG9yIiwiY3NzIiwiaXNDb2xvclN1cHBvcnRlZCIsImxpbmVzIiwic3BsaXQiLCJzdGFydCIsIk1hdGgiLCJtYXgiLCJlbmQiLCJtaW4iLCJsZW5ndGgiLCJtYXhXaWR0aCIsIlN0cmluZyIsIm1hcmsiLCJhc2lkZSIsImJvbGQiLCJncmF5IiwicmVkIiwiY3JlYXRlQ29sb3JzIiwidGV4dCIsInN0ciIsInNsaWNlIiwibWFwIiwiaW5kZXgiLCJudW1iZXIiLCJndXR0ZXIiLCJzcGFjaW5nIiwicmVwbGFjZSIsImpvaW4iLCJ0b1N0cmluZyIsImNvZGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/css-syntax-error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/input.js":
/*!*******************************************!*\
  !*** ./node_modules/postcss/lib/input.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet { SourceMapConsumer, SourceMapGenerator } = __webpack_require__(/*! source-map-js */ \"(ssr)/./node_modules/source-map-js/source-map.js\");\nlet { fileURLToPath, pathToFileURL } = __webpack_require__(/*! url */ \"url\");\nlet { isAbsolute, resolve } = __webpack_require__(/*! path */ \"path\");\nlet { nanoid } = __webpack_require__(/*! nanoid/non-secure */ \"(ssr)/./node_modules/nanoid/non-secure/index.cjs\");\nlet terminalHighlight = __webpack_require__(/*! ./terminal-highlight */ \"(ssr)/./node_modules/postcss/lib/terminal-highlight.js\");\nlet CssSyntaxError = __webpack_require__(/*! ./css-syntax-error */ \"(ssr)/./node_modules/postcss/lib/css-syntax-error.js\");\nlet PreviousMap = __webpack_require__(/*! ./previous-map */ \"(ssr)/./node_modules/postcss/lib/previous-map.js\");\nlet fromOffsetCache = Symbol(\"fromOffsetCache\");\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator);\nlet pathAvailable = Boolean(resolve && isAbsolute);\nclass Input {\n    constructor(css, opts = {}){\n        if (css === null || typeof css === \"undefined\" || typeof css === \"object\" && !css.toString) {\n            throw new Error(`PostCSS received ${css} instead of CSS string`);\n        }\n        this.css = css.toString();\n        if (this.css[0] === \"\\uFEFF\" || this.css[0] === \"￾\") {\n            this.hasBOM = true;\n            this.css = this.css.slice(1);\n        } else {\n            this.hasBOM = false;\n        }\n        if (opts.from) {\n            if (!pathAvailable || /^\\w+:\\/\\//.test(opts.from) || isAbsolute(opts.from)) {\n                this.file = opts.from;\n            } else {\n                this.file = resolve(opts.from);\n            }\n        }\n        if (pathAvailable && sourceMapAvailable) {\n            let map = new PreviousMap(this.css, opts);\n            if (map.text) {\n                this.map = map;\n                let file = map.consumer().file;\n                if (!this.file && file) this.file = this.mapResolve(file);\n            }\n        }\n        if (!this.file) {\n            this.id = \"<input css \" + nanoid(6) + \">\";\n        }\n        if (this.map) this.map.file = this.from;\n    }\n    error(message, line, column, opts = {}) {\n        let result, endLine, endColumn;\n        if (line && typeof line === \"object\") {\n            let start = line;\n            let end = column;\n            if (typeof start.offset === \"number\") {\n                let pos = this.fromOffset(start.offset);\n                line = pos.line;\n                column = pos.col;\n            } else {\n                line = start.line;\n                column = start.column;\n            }\n            if (typeof end.offset === \"number\") {\n                let pos = this.fromOffset(end.offset);\n                endLine = pos.line;\n                endColumn = pos.col;\n            } else {\n                endLine = end.line;\n                endColumn = end.column;\n            }\n        } else if (!column) {\n            let pos = this.fromOffset(line);\n            line = pos.line;\n            column = pos.col;\n        }\n        let origin = this.origin(line, column, endLine, endColumn);\n        if (origin) {\n            result = new CssSyntaxError(message, origin.endLine === undefined ? origin.line : {\n                column: origin.column,\n                line: origin.line\n            }, origin.endLine === undefined ? origin.column : {\n                column: origin.endColumn,\n                line: origin.endLine\n            }, origin.source, origin.file, opts.plugin);\n        } else {\n            result = new CssSyntaxError(message, endLine === undefined ? line : {\n                column,\n                line\n            }, endLine === undefined ? column : {\n                column: endColumn,\n                line: endLine\n            }, this.css, this.file, opts.plugin);\n        }\n        result.input = {\n            column,\n            endColumn,\n            endLine,\n            line,\n            source: this.css\n        };\n        if (this.file) {\n            if (pathToFileURL) {\n                result.input.url = pathToFileURL(this.file).toString();\n            }\n            result.input.file = this.file;\n        }\n        return result;\n    }\n    fromOffset(offset) {\n        let lastLine, lineToIndex;\n        if (!this[fromOffsetCache]) {\n            let lines = this.css.split(\"\\n\");\n            lineToIndex = new Array(lines.length);\n            let prevIndex = 0;\n            for(let i = 0, l = lines.length; i < l; i++){\n                lineToIndex[i] = prevIndex;\n                prevIndex += lines[i].length + 1;\n            }\n            this[fromOffsetCache] = lineToIndex;\n        } else {\n            lineToIndex = this[fromOffsetCache];\n        }\n        lastLine = lineToIndex[lineToIndex.length - 1];\n        let min = 0;\n        if (offset >= lastLine) {\n            min = lineToIndex.length - 1;\n        } else {\n            let max = lineToIndex.length - 2;\n            let mid;\n            while(min < max){\n                mid = min + (max - min >> 1);\n                if (offset < lineToIndex[mid]) {\n                    max = mid - 1;\n                } else if (offset >= lineToIndex[mid + 1]) {\n                    min = mid + 1;\n                } else {\n                    min = mid;\n                    break;\n                }\n            }\n        }\n        return {\n            col: offset - lineToIndex[min] + 1,\n            line: min + 1\n        };\n    }\n    mapResolve(file) {\n        if (/^\\w+:\\/\\//.test(file)) {\n            return file;\n        }\n        return resolve(this.map.consumer().sourceRoot || this.map.root || \".\", file);\n    }\n    origin(line, column, endLine, endColumn) {\n        if (!this.map) return false;\n        let consumer = this.map.consumer();\n        let from = consumer.originalPositionFor({\n            column,\n            line\n        });\n        if (!from.source) return false;\n        let to;\n        if (typeof endLine === \"number\") {\n            to = consumer.originalPositionFor({\n                column: endColumn,\n                line: endLine\n            });\n        }\n        let fromUrl;\n        if (isAbsolute(from.source)) {\n            fromUrl = pathToFileURL(from.source);\n        } else {\n            fromUrl = new URL(from.source, this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile));\n        }\n        let result = {\n            column: from.column,\n            endColumn: to && to.column,\n            endLine: to && to.line,\n            line: from.line,\n            url: fromUrl.toString()\n        };\n        if (fromUrl.protocol === \"file:\") {\n            if (fileURLToPath) {\n                result.file = fileURLToPath(fromUrl);\n            } else {\n                /* c8 ignore next 2 */ throw new Error(`file: protocol is not available in this PostCSS build`);\n            }\n        }\n        let source = consumer.sourceContentFor(from.source);\n        if (source) result.source = source;\n        return result;\n    }\n    toJSON() {\n        let json = {};\n        for (let name of [\n            \"hasBOM\",\n            \"css\",\n            \"file\",\n            \"id\"\n        ]){\n            if (this[name] != null) {\n                json[name] = this[name];\n            }\n        }\n        if (this.map) {\n            json.map = {\n                ...this.map\n            };\n            if (json.map.consumerCache) {\n                json.map.consumerCache = undefined;\n            }\n        }\n        return json;\n    }\n    get from() {\n        return this.file || this.id;\n    }\n}\nmodule.exports = Input;\nInput.default = Input;\nif (terminalHighlight && terminalHighlight.registerInput) {\n    terminalHighlight.registerInput(Input);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/input.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/previous-map.js":
/*!**************************************************!*\
  !*** ./node_modules/postcss/lib/previous-map.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet { SourceMapConsumer, SourceMapGenerator } = __webpack_require__(/*! source-map-js */ \"(ssr)/./node_modules/source-map-js/source-map.js\");\nlet { existsSync, readFileSync } = __webpack_require__(/*! fs */ \"fs\");\nlet { dirname, join } = __webpack_require__(/*! path */ \"path\");\nfunction fromBase64(str) {\n    if (Buffer) {\n        return Buffer.from(str, \"base64\").toString();\n    } else {\n        /* c8 ignore next 2 */ return window.atob(str);\n    }\n}\nclass PreviousMap {\n    constructor(css, opts){\n        if (opts.map === false) return;\n        this.loadAnnotation(css);\n        this.inline = this.startWith(this.annotation, \"data:\");\n        let prev = opts.map ? opts.map.prev : undefined;\n        let text = this.loadMap(opts.from, prev);\n        if (!this.mapFile && opts.from) {\n            this.mapFile = opts.from;\n        }\n        if (this.mapFile) this.root = dirname(this.mapFile);\n        if (text) this.text = text;\n    }\n    consumer() {\n        if (!this.consumerCache) {\n            this.consumerCache = new SourceMapConsumer(this.text);\n        }\n        return this.consumerCache;\n    }\n    decodeInline(text) {\n        let baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/;\n        let baseUri = /^data:application\\/json;base64,/;\n        let charsetUri = /^data:application\\/json;charset=utf-?8,/;\n        let uri = /^data:application\\/json,/;\n        if (charsetUri.test(text) || uri.test(text)) {\n            return decodeURIComponent(text.substr(RegExp.lastMatch.length));\n        }\n        if (baseCharsetUri.test(text) || baseUri.test(text)) {\n            return fromBase64(text.substr(RegExp.lastMatch.length));\n        }\n        let encoding = text.match(/data:application\\/json;([^,]+),/)[1];\n        throw new Error(\"Unsupported source map encoding \" + encoding);\n    }\n    getAnnotationURL(sourceMapString) {\n        return sourceMapString.replace(/^\\/\\*\\s*# sourceMappingURL=/, \"\").trim();\n    }\n    isMap(map) {\n        if (typeof map !== \"object\") return false;\n        return typeof map.mappings === \"string\" || typeof map._mappings === \"string\" || Array.isArray(map.sections);\n    }\n    loadAnnotation(css) {\n        let comments = css.match(/\\/\\*\\s*# sourceMappingURL=/gm);\n        if (!comments) return;\n        // sourceMappingURLs from comments, strings, etc.\n        let start = css.lastIndexOf(comments.pop());\n        let end = css.indexOf(\"*/\", start);\n        if (start > -1 && end > -1) {\n            // Locate the last sourceMappingURL to avoid pickin\n            this.annotation = this.getAnnotationURL(css.substring(start, end));\n        }\n    }\n    loadFile(path) {\n        this.root = dirname(path);\n        if (existsSync(path)) {\n            this.mapFile = path;\n            return readFileSync(path, \"utf-8\").toString().trim();\n        }\n    }\n    loadMap(file, prev) {\n        if (prev === false) return false;\n        if (prev) {\n            if (typeof prev === \"string\") {\n                return prev;\n            } else if (typeof prev === \"function\") {\n                let prevPath = prev(file);\n                if (prevPath) {\n                    let map = this.loadFile(prevPath);\n                    if (!map) {\n                        throw new Error(\"Unable to load previous source map: \" + prevPath.toString());\n                    }\n                    return map;\n                }\n            } else if (prev instanceof SourceMapConsumer) {\n                return SourceMapGenerator.fromSourceMap(prev).toString();\n            } else if (prev instanceof SourceMapGenerator) {\n                return prev.toString();\n            } else if (this.isMap(prev)) {\n                return JSON.stringify(prev);\n            } else {\n                throw new Error(\"Unsupported previous source map format: \" + prev.toString());\n            }\n        } else if (this.inline) {\n            return this.decodeInline(this.annotation);\n        } else if (this.annotation) {\n            let map = this.annotation;\n            if (file) map = join(dirname(file), map);\n            return this.loadFile(map);\n        }\n    }\n    startWith(string, start) {\n        if (!string) return false;\n        return string.substr(0, start.length) === start;\n    }\n    withContent() {\n        return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);\n    }\n}\nmodule.exports = PreviousMap;\nPreviousMap.default = PreviousMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/previous-map.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/terminal-highlight.js":
/*!********************************************************!*\
  !*** ./node_modules/postcss/lib/terminal-highlight.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet pico = __webpack_require__(/*! picocolors */ \"(ssr)/./node_modules/picocolors/picocolors.js\");\nlet tokenizer = __webpack_require__(/*! ./tokenize */ \"(ssr)/./node_modules/postcss/lib/tokenize.js\");\nlet Input;\nfunction registerInput(dependant) {\n    Input = dependant;\n}\nconst HIGHLIGHT_THEME = {\n    \";\": pico.yellow,\n    \":\": pico.yellow,\n    \"(\": pico.cyan,\n    \")\": pico.cyan,\n    \"[\": pico.yellow,\n    \"]\": pico.yellow,\n    \"{\": pico.yellow,\n    \"}\": pico.yellow,\n    \"at-word\": pico.cyan,\n    \"brackets\": pico.cyan,\n    \"call\": pico.cyan,\n    \"class\": pico.yellow,\n    \"comment\": pico.gray,\n    \"hash\": pico.magenta,\n    \"string\": pico.green\n};\nfunction getTokenType([type, value], processor) {\n    if (type === \"word\") {\n        if (value[0] === \".\") {\n            return \"class\";\n        }\n        if (value[0] === \"#\") {\n            return \"hash\";\n        }\n    }\n    if (!processor.endOfFile()) {\n        let next = processor.nextToken();\n        processor.back(next);\n        if (next[0] === \"brackets\" || next[0] === \"(\") return \"call\";\n    }\n    return type;\n}\nfunction terminalHighlight(css) {\n    let processor = tokenizer(new Input(css), {\n        ignoreErrors: true\n    });\n    let result = \"\";\n    while(!processor.endOfFile()){\n        let token = processor.nextToken();\n        let color = HIGHLIGHT_THEME[getTokenType(token, processor)];\n        if (color) {\n            result += token[1].split(/\\r?\\n/).map((i)=>color(i)).join(\"\\n\");\n        } else {\n            result += token[1];\n        }\n    }\n    return result;\n}\nterminalHighlight.registerInput = registerInput;\nmodule.exports = terminalHighlight;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvdGVybWluYWwtaGlnaGxpZ2h0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFFbkIsSUFBSUMsWUFBWUQsbUJBQU9BLENBQUM7QUFFeEIsSUFBSUU7QUFFSixTQUFTQyxjQUFjQyxTQUFTO0lBQzlCRixRQUFRRTtBQUNWO0FBRUEsTUFBTUMsa0JBQWtCO0lBQ3RCLEtBQUtOLEtBQUtPLE1BQU07SUFDaEIsS0FBS1AsS0FBS08sTUFBTTtJQUNoQixLQUFLUCxLQUFLUSxJQUFJO0lBQ2QsS0FBS1IsS0FBS1EsSUFBSTtJQUNkLEtBQUtSLEtBQUtPLE1BQU07SUFDaEIsS0FBS1AsS0FBS08sTUFBTTtJQUNoQixLQUFLUCxLQUFLTyxNQUFNO0lBQ2hCLEtBQUtQLEtBQUtPLE1BQU07SUFDaEIsV0FBV1AsS0FBS1EsSUFBSTtJQUNwQixZQUFZUixLQUFLUSxJQUFJO0lBQ3JCLFFBQVFSLEtBQUtRLElBQUk7SUFDakIsU0FBU1IsS0FBS08sTUFBTTtJQUNwQixXQUFXUCxLQUFLUyxJQUFJO0lBQ3BCLFFBQVFULEtBQUtVLE9BQU87SUFDcEIsVUFBVVYsS0FBS1csS0FBSztBQUN0QjtBQUVBLFNBQVNDLGFBQWEsQ0FBQ0MsTUFBTUMsTUFBTSxFQUFFQyxTQUFTO0lBQzVDLElBQUlGLFNBQVMsUUFBUTtRQUNuQixJQUFJQyxLQUFLLENBQUMsRUFBRSxLQUFLLEtBQUs7WUFDcEIsT0FBTztRQUNUO1FBQ0EsSUFBSUEsS0FBSyxDQUFDLEVBQUUsS0FBSyxLQUFLO1lBQ3BCLE9BQU87UUFDVDtJQUNGO0lBRUEsSUFBSSxDQUFDQyxVQUFVQyxTQUFTLElBQUk7UUFDMUIsSUFBSUMsT0FBT0YsVUFBVUcsU0FBUztRQUM5QkgsVUFBVUksSUFBSSxDQUFDRjtRQUNmLElBQUlBLElBQUksQ0FBQyxFQUFFLEtBQUssY0FBY0EsSUFBSSxDQUFDLEVBQUUsS0FBSyxLQUFLLE9BQU87SUFDeEQ7SUFFQSxPQUFPSjtBQUNUO0FBRUEsU0FBU08sa0JBQWtCQyxHQUFHO0lBQzVCLElBQUlOLFlBQVliLFVBQVUsSUFBSUMsTUFBTWtCLE1BQU07UUFBRUMsY0FBYztJQUFLO0lBQy9ELElBQUlDLFNBQVM7SUFDYixNQUFPLENBQUNSLFVBQVVDLFNBQVMsR0FBSTtRQUM3QixJQUFJUSxRQUFRVCxVQUFVRyxTQUFTO1FBQy9CLElBQUlPLFFBQVFuQixlQUFlLENBQUNNLGFBQWFZLE9BQU9ULFdBQVc7UUFDM0QsSUFBSVUsT0FBTztZQUNURixVQUFVQyxLQUFLLENBQUMsRUFBRSxDQUNmRSxLQUFLLENBQUMsU0FDTkMsR0FBRyxDQUFDQyxDQUFBQSxJQUFLSCxNQUFNRyxJQUNmQyxJQUFJLENBQUM7UUFDVixPQUFPO1lBQ0xOLFVBQVVDLEtBQUssQ0FBQyxFQUFFO1FBQ3BCO0lBQ0Y7SUFDQSxPQUFPRDtBQUNUO0FBRUFILGtCQUFrQmhCLGFBQWEsR0FBR0E7QUFFbEMwQixPQUFPQyxPQUFPLEdBQUdYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi90ZXJtaW5hbC1oaWdobGlnaHQuanM/OGQ4NSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IHBpY28gPSByZXF1aXJlKCdwaWNvY29sb3JzJylcblxubGV0IHRva2VuaXplciA9IHJlcXVpcmUoJy4vdG9rZW5pemUnKVxuXG5sZXQgSW5wdXRcblxuZnVuY3Rpb24gcmVnaXN0ZXJJbnB1dChkZXBlbmRhbnQpIHtcbiAgSW5wdXQgPSBkZXBlbmRhbnRcbn1cblxuY29uc3QgSElHSExJR0hUX1RIRU1FID0ge1xuICAnOyc6IHBpY28ueWVsbG93LFxuICAnOic6IHBpY28ueWVsbG93LFxuICAnKCc6IHBpY28uY3lhbixcbiAgJyknOiBwaWNvLmN5YW4sXG4gICdbJzogcGljby55ZWxsb3csXG4gICddJzogcGljby55ZWxsb3csXG4gICd7JzogcGljby55ZWxsb3csXG4gICd9JzogcGljby55ZWxsb3csXG4gICdhdC13b3JkJzogcGljby5jeWFuLFxuICAnYnJhY2tldHMnOiBwaWNvLmN5YW4sXG4gICdjYWxsJzogcGljby5jeWFuLFxuICAnY2xhc3MnOiBwaWNvLnllbGxvdyxcbiAgJ2NvbW1lbnQnOiBwaWNvLmdyYXksXG4gICdoYXNoJzogcGljby5tYWdlbnRhLFxuICAnc3RyaW5nJzogcGljby5ncmVlblxufVxuXG5mdW5jdGlvbiBnZXRUb2tlblR5cGUoW3R5cGUsIHZhbHVlXSwgcHJvY2Vzc29yKSB7XG4gIGlmICh0eXBlID09PSAnd29yZCcpIHtcbiAgICBpZiAodmFsdWVbMF0gPT09ICcuJykge1xuICAgICAgcmV0dXJuICdjbGFzcydcbiAgICB9XG4gICAgaWYgKHZhbHVlWzBdID09PSAnIycpIHtcbiAgICAgIHJldHVybiAnaGFzaCdcbiAgICB9XG4gIH1cblxuICBpZiAoIXByb2Nlc3Nvci5lbmRPZkZpbGUoKSkge1xuICAgIGxldCBuZXh0ID0gcHJvY2Vzc29yLm5leHRUb2tlbigpXG4gICAgcHJvY2Vzc29yLmJhY2sobmV4dClcbiAgICBpZiAobmV4dFswXSA9PT0gJ2JyYWNrZXRzJyB8fCBuZXh0WzBdID09PSAnKCcpIHJldHVybiAnY2FsbCdcbiAgfVxuXG4gIHJldHVybiB0eXBlXG59XG5cbmZ1bmN0aW9uIHRlcm1pbmFsSGlnaGxpZ2h0KGNzcykge1xuICBsZXQgcHJvY2Vzc29yID0gdG9rZW5pemVyKG5ldyBJbnB1dChjc3MpLCB7IGlnbm9yZUVycm9yczogdHJ1ZSB9KVxuICBsZXQgcmVzdWx0ID0gJydcbiAgd2hpbGUgKCFwcm9jZXNzb3IuZW5kT2ZGaWxlKCkpIHtcbiAgICBsZXQgdG9rZW4gPSBwcm9jZXNzb3IubmV4dFRva2VuKClcbiAgICBsZXQgY29sb3IgPSBISUdITElHSFRfVEhFTUVbZ2V0VG9rZW5UeXBlKHRva2VuLCBwcm9jZXNzb3IpXVxuICAgIGlmIChjb2xvcikge1xuICAgICAgcmVzdWx0ICs9IHRva2VuWzFdXG4gICAgICAgIC5zcGxpdCgvXFxyP1xcbi8pXG4gICAgICAgIC5tYXAoaSA9PiBjb2xvcihpKSlcbiAgICAgICAgLmpvaW4oJ1xcbicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCArPSB0b2tlblsxXVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG5cbnRlcm1pbmFsSGlnaGxpZ2h0LnJlZ2lzdGVySW5wdXQgPSByZWdpc3RlcklucHV0XG5cbm1vZHVsZS5leHBvcnRzID0gdGVybWluYWxIaWdobGlnaHRcbiJdLCJuYW1lcyI6WyJwaWNvIiwicmVxdWlyZSIsInRva2VuaXplciIsIklucHV0IiwicmVnaXN0ZXJJbnB1dCIsImRlcGVuZGFudCIsIkhJR0hMSUdIVF9USEVNRSIsInllbGxvdyIsImN5YW4iLCJncmF5IiwibWFnZW50YSIsImdyZWVuIiwiZ2V0VG9rZW5UeXBlIiwidHlwZSIsInZhbHVlIiwicHJvY2Vzc29yIiwiZW5kT2ZGaWxlIiwibmV4dCIsIm5leHRUb2tlbiIsImJhY2siLCJ0ZXJtaW5hbEhpZ2hsaWdodCIsImNzcyIsImlnbm9yZUVycm9ycyIsInJlc3VsdCIsInRva2VuIiwiY29sb3IiLCJzcGxpdCIsIm1hcCIsImkiLCJqb2luIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/terminal-highlight.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/tokenize.js":
/*!**********************************************!*\
  !*** ./node_modules/postcss/lib/tokenize.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\nconst SINGLE_QUOTE = \"'\".charCodeAt(0);\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0);\nconst BACKSLASH = \"\\\\\".charCodeAt(0);\nconst SLASH = \"/\".charCodeAt(0);\nconst NEWLINE = \"\\n\".charCodeAt(0);\nconst SPACE = \" \".charCodeAt(0);\nconst FEED = \"\\f\".charCodeAt(0);\nconst TAB = \"\t\".charCodeAt(0);\nconst CR = \"\\r\".charCodeAt(0);\nconst OPEN_SQUARE = \"[\".charCodeAt(0);\nconst CLOSE_SQUARE = \"]\".charCodeAt(0);\nconst OPEN_PARENTHESES = \"(\".charCodeAt(0);\nconst CLOSE_PARENTHESES = \")\".charCodeAt(0);\nconst OPEN_CURLY = \"{\".charCodeAt(0);\nconst CLOSE_CURLY = \"}\".charCodeAt(0);\nconst SEMICOLON = \";\".charCodeAt(0);\nconst ASTERISK = \"*\".charCodeAt(0);\nconst COLON = \":\".charCodeAt(0);\nconst AT = \"@\".charCodeAt(0);\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g;\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g;\nconst RE_BAD_BRACKET = /.[\\r\\n\"'(/\\\\]/;\nconst RE_HEX_ESCAPE = /[\\da-f]/i;\nmodule.exports = function tokenizer(input, options = {}) {\n    let css = input.css.valueOf();\n    let ignore = options.ignoreErrors;\n    let code, next, quote, content, escape;\n    let escaped, escapePos, prev, n, currentToken;\n    let length = css.length;\n    let pos = 0;\n    let buffer = [];\n    let returned = [];\n    function position() {\n        return pos;\n    }\n    function unclosed(what) {\n        throw input.error(\"Unclosed \" + what, pos);\n    }\n    function endOfFile() {\n        return returned.length === 0 && pos >= length;\n    }\n    function nextToken(opts) {\n        if (returned.length) return returned.pop();\n        if (pos >= length) return;\n        let ignoreUnclosed = opts ? opts.ignoreUnclosed : false;\n        code = css.charCodeAt(pos);\n        switch(code){\n            case NEWLINE:\n            case SPACE:\n            case TAB:\n            case CR:\n            case FEED:\n                {\n                    next = pos;\n                    do {\n                        next += 1;\n                        code = css.charCodeAt(next);\n                    }while (code === SPACE || code === NEWLINE || code === TAB || code === CR || code === FEED);\n                    currentToken = [\n                        \"space\",\n                        css.slice(pos, next)\n                    ];\n                    pos = next - 1;\n                    break;\n                }\n            case OPEN_SQUARE:\n            case CLOSE_SQUARE:\n            case OPEN_CURLY:\n            case CLOSE_CURLY:\n            case COLON:\n            case SEMICOLON:\n            case CLOSE_PARENTHESES:\n                {\n                    let controlChar = String.fromCharCode(code);\n                    currentToken = [\n                        controlChar,\n                        controlChar,\n                        pos\n                    ];\n                    break;\n                }\n            case OPEN_PARENTHESES:\n                {\n                    prev = buffer.length ? buffer.pop()[1] : \"\";\n                    n = css.charCodeAt(pos + 1);\n                    if (prev === \"url\" && n !== SINGLE_QUOTE && n !== DOUBLE_QUOTE && n !== SPACE && n !== NEWLINE && n !== TAB && n !== FEED && n !== CR) {\n                        next = pos;\n                        do {\n                            escaped = false;\n                            next = css.indexOf(\")\", next + 1);\n                            if (next === -1) {\n                                if (ignore || ignoreUnclosed) {\n                                    next = pos;\n                                    break;\n                                } else {\n                                    unclosed(\"bracket\");\n                                }\n                            }\n                            escapePos = next;\n                            while(css.charCodeAt(escapePos - 1) === BACKSLASH){\n                                escapePos -= 1;\n                                escaped = !escaped;\n                            }\n                        }while (escaped);\n                        currentToken = [\n                            \"brackets\",\n                            css.slice(pos, next + 1),\n                            pos,\n                            next\n                        ];\n                        pos = next;\n                    } else {\n                        next = css.indexOf(\")\", pos + 1);\n                        content = css.slice(pos, next + 1);\n                        if (next === -1 || RE_BAD_BRACKET.test(content)) {\n                            currentToken = [\n                                \"(\",\n                                \"(\",\n                                pos\n                            ];\n                        } else {\n                            currentToken = [\n                                \"brackets\",\n                                content,\n                                pos,\n                                next\n                            ];\n                            pos = next;\n                        }\n                    }\n                    break;\n                }\n            case SINGLE_QUOTE:\n            case DOUBLE_QUOTE:\n                {\n                    quote = code === SINGLE_QUOTE ? \"'\" : '\"';\n                    next = pos;\n                    do {\n                        escaped = false;\n                        next = css.indexOf(quote, next + 1);\n                        if (next === -1) {\n                            if (ignore || ignoreUnclosed) {\n                                next = pos + 1;\n                                break;\n                            } else {\n                                unclosed(\"string\");\n                            }\n                        }\n                        escapePos = next;\n                        while(css.charCodeAt(escapePos - 1) === BACKSLASH){\n                            escapePos -= 1;\n                            escaped = !escaped;\n                        }\n                    }while (escaped);\n                    currentToken = [\n                        \"string\",\n                        css.slice(pos, next + 1),\n                        pos,\n                        next\n                    ];\n                    pos = next;\n                    break;\n                }\n            case AT:\n                {\n                    RE_AT_END.lastIndex = pos + 1;\n                    RE_AT_END.test(css);\n                    if (RE_AT_END.lastIndex === 0) {\n                        next = css.length - 1;\n                    } else {\n                        next = RE_AT_END.lastIndex - 2;\n                    }\n                    currentToken = [\n                        \"at-word\",\n                        css.slice(pos, next + 1),\n                        pos,\n                        next\n                    ];\n                    pos = next;\n                    break;\n                }\n            case BACKSLASH:\n                {\n                    next = pos;\n                    escape = true;\n                    while(css.charCodeAt(next + 1) === BACKSLASH){\n                        next += 1;\n                        escape = !escape;\n                    }\n                    code = css.charCodeAt(next + 1);\n                    if (escape && code !== SLASH && code !== SPACE && code !== NEWLINE && code !== TAB && code !== CR && code !== FEED) {\n                        next += 1;\n                        if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n                            while(RE_HEX_ESCAPE.test(css.charAt(next + 1))){\n                                next += 1;\n                            }\n                            if (css.charCodeAt(next + 1) === SPACE) {\n                                next += 1;\n                            }\n                        }\n                    }\n                    currentToken = [\n                        \"word\",\n                        css.slice(pos, next + 1),\n                        pos,\n                        next\n                    ];\n                    pos = next;\n                    break;\n                }\n            default:\n                {\n                    if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n                        next = css.indexOf(\"*/\", pos + 2) + 1;\n                        if (next === 0) {\n                            if (ignore || ignoreUnclosed) {\n                                next = css.length;\n                            } else {\n                                unclosed(\"comment\");\n                            }\n                        }\n                        currentToken = [\n                            \"comment\",\n                            css.slice(pos, next + 1),\n                            pos,\n                            next\n                        ];\n                        pos = next;\n                    } else {\n                        RE_WORD_END.lastIndex = pos + 1;\n                        RE_WORD_END.test(css);\n                        if (RE_WORD_END.lastIndex === 0) {\n                            next = css.length - 1;\n                        } else {\n                            next = RE_WORD_END.lastIndex - 2;\n                        }\n                        currentToken = [\n                            \"word\",\n                            css.slice(pos, next + 1),\n                            pos,\n                            next\n                        ];\n                        buffer.push(currentToken);\n                        pos = next;\n                    }\n                    break;\n                }\n        }\n        pos++;\n        return currentToken;\n    }\n    function back(token) {\n        returned.push(token);\n    }\n    return {\n        back,\n        endOfFile,\n        nextToken,\n        position\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/tokenize.js\n");

/***/ })

};
;